//  a11y pdf – A customizable PDF export tool for generating PDF files 
//  that meet the PDF/UA accessibility standard.
//  Copyright (C) 2025 a11y design GmbH, see <https://www.a11y-design.de/>.
//  This file is part of a11y pdf.
//
//  a11y pdf is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Affero General Public License as
//  published by the Free Software Foundation, either version 3 of the
//  License, or (at your option) any later version.
//
//  a11y pdf is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY

using System;
using System.Collections.Generic;
using iText.Kernel.Pdf.Tagutils;
using iText.Kernel.Pdf.Tagging;
using iText.Kernel.Pdf;
using Microsoft.Office.Interop.PowerPoint;
using System.Text.RegularExpressions;

namespace A11y_Design_PowerPointAddin.Core
{
    class A11yMod_FixSpan : IA11yModification
    {
        public bool ModifyPDFNode(PdfPage page, TagTreePointer treePointer)
        {
            if (treePointer.GetRole().Equals("Span"))
            {
                return !FixSpanTag(treePointer, page);
            }
            return true;
        }

        /// <summary>
        /// A method to fix the Span tag
        /// Delete the span tag with Paths in it generated by PPT 2016
        /// </summary>
        public bool FixSpanTag(TagTreePointer treePointer, PdfPage page)
        {

            FixSpanSpaces(treePointer);
            PdfStructElem pdfElem = treePointer.GetContext().GetPointerStructElem(treePointer);
            TagTreePointer parent = new TagTreePointer(treePointer);
            bool isMcrchild = false;
            if (treePointer.GetKidsRoles() != null && treePointer.GetKidsRoles().Count > 0)
                isMcrchild = treePointer.GetKidsRoles()[0].Equals("MCR");
            if (isMcrchild && pdfElem.GetActualText() == null)
            {
                treePointer.SetRole("Artifact");
                int id = treePointer.GetMcid(0);
                var contentStreamAsText = new PdfString(page.GetContentBytes()).ToString();
                Regex reg = new Regex(@"\/(P|Span)\s*<</MCID\s"+id+@">>\s*BDC");
                contentStreamAsText = reg.Replace(contentStreamAsText, PdfName.Artifact + " BMC");
                
                page.GetFirstContentStream().SetData(new PdfString(contentStreamAsText).GetValueBytes());
                treePointer.MoveToPointer(parent);
                treePointer.GetPdfStructureElem().RemoveKid(0);
                treePointer.RemoveTag();
                return true;
            }
            return false;
        }


        /// <summary>
        /// A method to create the missing spaces between spans
        /// </summary>
        private void FixSpanSpaces(TagTreePointer treePointer)
        {
            int spanIndex = treePointer.GetIndexInParentKidsList();
            treePointer.MoveToParent();
            IList<String> roles = treePointer.GetKidsRoles();
            treePointer.MoveToKid(spanIndex);
            String spanText = treePointer.GetProperties().GetActualText();
            if (spanText != null && spanText.Length > 0 && !spanText.Substring(spanText.Length - 1).Equals(" ") && !IsLastSpan(roles, spanIndex))
                treePointer.GetProperties().SetActualText(spanText + " ");
        }

        /// <summary>
        /// Checks if the span is a last span child of its parent
        /// </summary>
        private bool IsLastSpan(IList<String> roles, int index)
        {
            int lastSpanIndex = -1;
            for (int i = 0; i < roles.Count; ++i)
            {
                if (roles[i].Equals("Span"))
                    lastSpanIndex = i;
            }
            return lastSpanIndex == index;

        }

        public void ModifyPDFRoot(PdfDocument pdfDoc)
        {
        }

        public void Visit(Slide slide)
        {
        }

        public void Visit(Slide slide, Shape shape)
        {
        }
    }
}
